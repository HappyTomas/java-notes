1) Webpack 是一个前端资源加载/打包工具。它将根据模块的依赖关系进行静态分析，然后将这些模块按照指定的规则生成对应的静态资源
2) Webpack 可以将多种静态资源 js、css、less 转换成一个静态文件，减少了页面的请求。
3) webpack 根据模块的依赖关系进行静态分析，这些文件(模块)会被包含到 bundle.js 文件中。Webpack 会给每个模块分配一个唯一的 id 并通过这个 id 索引和访问模块。 在页面启动时，会先执行 runoob1.js 中的代码，其它模块会在运行 require 的时候再执行。

#LOADER
1) Webpack 本身只能处理 JavaScript 模块，如果要处理其他类型的文件，就需要使用 loader 进行转换。
2) 所以如果我们需要在应用中添加 css 文件，就需要使用到 css-loader 和 style-loader，
3) css-loader 会遍历 CSS 文件，然后找到 url() 表达式然后处理他们，
4) style-loader 会把原来的 CSS 代码插入页面中的一个 style 标签中。
5) 使用以下命令来安装 css-loader 和 style-loader(全局安装需要参数 -g)。
5.1) npm install css-loader style-loader
5.2) 执行以上命令后，会再当前目录生成 node_modules 目录，它就是 css-loader 和 style-loader 的安装目录。
6) in js: require("!style-loader!css-loader!./style.css");
7) require CSS 文件的时候都要写 loader 前缀 !style-loader!css-loader!，
8) 可以根据模块类型（扩展名）来自动绑定需要的 loader。 将 runoob1.js 中的 require("!style-loader!css-loader!./style.css") 修改为 require("./style.css") 
9) webpack runoob1.js bundle.js --module-bind 'css=style-loader!css-loader'

#配置文件
1) 可以将一些编译选项放在配置文件中，以便于统一管理：
2) webpack.config.js
module.exports = {
    entry: "./runoob1.js",
    output: {
        path: __dirname,
        filename: "bundle.js"
    },
    module: {
        loaders: [
            { test: /\.css$/, loader: "style-loader!css-loader" }
        ]
    }
};
3) 只需要执行 webpack 命令即可生成 bundle.js 文件
4) webpack 命令执行后，会默认载入当前目录的 webpack.config.js 文件。

#插件
1) 插件在 webpack 的配置信息 plugins 选项中指定，用于完成一些 loader 不能完成的工作。
2） webpack 自带一些插件，你可以可以通过 npm 安装一些插件。
npm install webpack --save-dev
3） 比如我们可以安装内置的 BannerPlugin 插件，用于在文件头部输出一些注释信息。
3.1） webpack.config.js
var webpack=require('webpack');
 
module.exports = {
    entry: "./runoob1.js",
    output: {
        path: __dirname,
        filename: "bundle.js"
    },
    module: {
        loaders: [
            { test: /\.css$/, loader: "style-loader!css-loader" }
        ]
    },
    plugins:[
	    new webpack.BannerPlugin('菜鸟教程 webpack 实例')
    ]
};
3.2）webpack
3.3) 打开 bundle.js，可以看到文件头部出现了我们指定的注释信息。
/*! 菜鸟教程 webpack 实例 */

#开发环境
1) 当项目逐渐变大，webpack 的编译时间会变长，可以通过参数让编译的输出 内容带有进度和颜色。
webpack --progress --colors
2) 如果不想每次修改模块后都重新编译，那么可以启动监听模式。开启监听模式后，没有变化的模块会在编译后缓存到内存中，而不会每次都被重新编译，所以监听模式的整体速度是很快的。
webpack --progress --colors --watch
3)webpack-dev-server
3.1) 可以使用 webpack-dev-server 开发服务，
3.2) 通过 localhost:8080 启动一个 express 静态资源 web 服务器
3.3) 以监听模式自动运行 webpack，在浏览器打开 http://localhost:8080/ 或 http://localhost:8080/webpack-dev-server/ 可以浏览项目中的页面和编译后的资源输出，并且通过一个 socket.io 服务实时监听它们的变化并自动刷新页面。
2) 安装webpack-dev-server
npm install webpack-dev-server -g
3) 运行webpack-dev-server
webpack-dev-server --progress --colors
4) access http://localhost:8080/ and manual refresh
5) access http://localhost:8080/webpack-dev-server/ to watch automatic update
5.1) webpack-dev-server is iframe to display the html, it is an app status header and url address will not change
6) add an webpack-dev-server/client config to entry to avoid using iframe:
entry: ["./runoob1.js", 'webpack-dev-server/client?http://localhost:8088']
6.1) webpack-dev-server --inline --port 8088 --progress --colors

######阮一峰博客######
# How to use
1) install Webpack and webpack-dev-server globally.
npm i -g webpack@1.x webpack-dev-server@1.x
2) clone the demo repo and install the dependencies
git clone https://github.com/ruanyf/webpack-demos.git
cd webpack-demos
npm install
3) play with the source files under the repo's demo* directories.
$ cd demo01
$ webpack-dev-server
4) http://localhost:8080/
Hello World

# Foreword: What is Webpack?
1) Webpack is a front-end build systems like Grunt and Gulp.
2) It can be used as a module bundler similar to Browserify, and do much more.
3) Its configuration file is webpack.config.js.
module.exports = {
  entry: './main.js',
  output: {
    filename: 'bundle.js'
  }
};
4) with webpack.config.js, you can invoke Webpack without any arguments.
webpack – for building once for development
webpack -p – for building once for production (minification)
webpack --watch – for continuous incremental build
webpack -d – to include source maps
webpack --colors – for making things pretty
5) what is source maps for? 帮助调试，可以看到源码

# Demo01: Entry file (source)
1） Entry file is a file which Webpack will read to build bundle.js.
2） e.g. main.js is an entry file.
module.exports = {
  entry: './main.js',
  output: {
    filename: 'bundle.js'
  }
};
