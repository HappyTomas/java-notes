svn.txt

菜鸟http://www.runoob.com/svn/svn-intro.html
- Apache Subversion 通常被缩写成 SVN，是一个开放源代码的版本控制系统
- SVN相对于的RCS、CVS，采用了分支管理系统，它的设计目标就是取代CVS。互联网上免费的版本控制服务多基于Subversion

#SVN 简介
Subversion(SVN) 是一个开源的版本控制系統, 也就是说 Subversion 管理着随时间改变的数据。 这些数据放置在一个中央资料档案库(repository) 中。 这个档案库很像一个普通的文件服务器, 不过它会记住每一次文件的变动。 这样你就可以把档案恢复到旧的版本, 或是浏览文件的变动历史。

SVN 的一些概念
- repository（源代码库）:源代码统一存放的地方
- Checkout（提取）:当你手上没有源代码的时候，你需要从repository checkout一份
- Commit（提交）:当你已经修改了代码，你就需要Commit到repository
- Update (更新):当你已经Checkout了一份源代码， Update一下你就可以和Repository上的源代码同步，你手上的代码就会有最新的变更

- 如果两个程序员同时修改了同一个文件呢, SVN可以合并这两个程序员的改动，实际上SVN管理源代码是以行为单位的，就是说两个程序员只要不是修改了同一行程序， SVN都会自动合并两种修改。如果是同一行，SVN会提示文件Confict, 冲突，需要手动确认。

#优于CVS之处
1、原子提交。一次提交不管是单个还是多个文件，都是作为一个整体提交的。在这当中发生的意外例如传输中断，不会引起数据库的不完整和数据损坏。
2、重命名、复制、删除文件等动作都保存在版本历史记录当中。
3、对于二进制文件，使用了节省空间的保存方法。（简单的理解，就是只保存和上一版本不同之处）
4、目录也有版本历史。整个目录树可以被移动或者复制，操作很简单，而且能够保留全部版本记录。
5、分支的开销非常小。
6、优化过的数据库访问，使得一些操作不必访问数据库就可以做到。这样减少了很多不必要的和数据库主机之间的网络流量。

#SVN 生命周期
Create 操作是用来创建一个新的版本库。大多数情况下这个操作只会执行一次。
Checkout 操作是用来从版本库创建一个工作副本。
update 操作是用来更新版本库的
commit 操作后才会成为版本库的一部分
同样地你可以删除文件/目录。删除操作立刻将文件从工作副本中删除掉，但该文件的实际删除只是被添加到了待变更列表中，直到执行了 commit 操作后才会真正删除。
- Rename 操作可以更改文件/目录的名字
- Status 操作列出了工作副本中所进行的变动
- Revert 操作重置了对工作副本的修改
Resolve 操作就是用来帮助用户找出冲突并告诉版本库如何处理这些冲突。
Commit 操作是用来将更改从工作副本到版本库。	

#SVN 启动模式
1) 首先,在服务端进行SVN版本库的相关配置
1.1) 手动新建版本库目录
mkdir /opt/svn
1.2) 利用svn命令创建版本库
svnadmin create /opt/svn/runoob
1.3) 使用命令svnserve启动服务
svnserve -d -r 目录 --listen-port 端口号
-r: 配置方式决定了版本库访问方式。
--listen-port: 指定SVN监听端口，不加此参数，SVN默认监听3690
1.3.1)方式一：-r直接指定到版本库(称之为单库svnserve方式)
svnserve -d -r /opt/svn/runoob
在这种情况下，一个svnserve只能为一个版本库工作。
authz配置文件中对版本库权限的配置应这样写：
[groups]
admin=user1
dev=user2
[/]
@admin=rw
user2=r
使用类似这样的URL：svn://192.168.0.1/　即可访问runoob版本库
1.3.2) 指定到版本库的上级目录(称之为多库svnserve方式)
svnserve -d -r /opt/svn
这种情况，一个svnserve可以为多个版本库工作
authz配置文件中对版本库权限的配置应这样写：
[groups]
admin=user1
dev=user2
[runoob:/]
@admin=rw
user2=r

[runoob01:/]
@admin=rw
user2=r
使用类似这样的URL：svn://192.168.0.1/runoob　即可访问runoob版本库。

#SVN 创建版本库
svnadmin create /opt/svn/runoob01
ll /opt/svn/runoob01/

1) 进入/opt/svn/runoob01/conf目录 修改默认配置文件配置，包括svnserve.conf、passwd、authz 配置相关用户和权限。
1、svn服务配置文件svnserve.conf
svn服务配置文件为版本库目录中的文件conf/svnserve.conf。该文件仅由一个[general]配置段组成。
[general]
anon-access = none
auth-access = write
password-db = passwd
authz-db = authz

passwd file:
[users]
user1 = 123456
user2 = 123456

authz file:
[runoob01:/]
user1 = rw
user2 = rw
* = r

mkdir runoob001/trunk -p
vim user1.txt
svn add user1.txt
svn commit -m 'add info#1' --username=user1 --password=123456
svn info (display working space version)
svn list (display working space version)
svn info svn://localhost/runoob01 --username=user1 --password=123456
svn list svn://localhost/runoob01 --username=user1 --password=123456
svn diff (workspace and last commit)
svn diff -r5 readme.txt (workspace and r5)
svn revert readme.txt
svn log: 用来展示svn 的版本作者、日期、路径等等。
svn log -r 6:8
svn log readme.txt

svn diff: 用来显示特定修改的行级详细信息。
svn cat: 取得在特定版本的某文件显示在当前屏幕。
svn list: 显示一个目录或某一版本存在的文件。

如果用 svn diff，不带任何参数，它将会比较你的工作文件与缓存在 .svn 的"原始"拷贝。
比较你的工作拷贝和版本库中版本号为 3 的文件 rule.txt。
svn diff -r 3 readme.txt
svn diff -r 2:3 readme.txt
svn cat -r 3 readme.txt

#SVN分支
svn trunk = git master
svnserve -d -r svn (svn is the root of the repository server)
创建分支
svn cp -m "create branch" http://localhost/atwjsw/trunk http://localhost/atwjsw/branches/br_feature001
