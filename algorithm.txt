# 选择排序法 Selection Sort
1）O(n^2)的排序算法
1.1）最优的排序算法是O（nlog(n))
1.2) 基础
1.3）编码简单， 适合简单情景

Merge Sort
1) 递归
//递归使用归并排序，对arr[l...r]的范围进行排序
mergeSort(int[] arr, int l, int r) {
	//递归函数，首先处理递归到底的情况
	if (l>=r) {
		return;
	}
	//计算中点位置
	int mid= (l+r)/2;
	mergeSort(arr, l, mid);
	mergeSort(arr, mid+1, l);
	merge(arr, l, mid, r);
}

//将arr[l---mid]和arr[mid+l...r]两部分进行归并
merge(int[] arr, int l, int mid, int r) {
	int[] aux = new int[r-l+1];
	for (int i=l; i <= r; i++) {
		aux[i-l] = arr[i];
	}
	int i = l, j = mid + 1;	
	for (int k=l; k<=r; k++) {
		if (i > mid) {
			arr[k] = aux[j-l];
			j++;
		} else if (j>r) {
			arr[k] = aux[i-l];
			i++;
		} else if (aux[i-l] < arr[j-l]) {
			arr[k] = arr[i-l];		
			i++;
		} else {
			arr[k] = arr[j-l];
			j++;
		}
	} 
}


1) 项目经历和项目中遇到的实际问题？
2） 你遇到的印象最深的bug是什么？
3） 面向对象类问题
4） 设计模式类问题
5） 网络相关、安全相关、内存相关、并发相关？
6） 系统设计： scalability

当没有思路的时候
1） 自己给自己几个测试用例，实验一下。
2） 不要忽视暴力解法。 暴力解法通常是思考的起点。
3）算法优化： 使用数据结构和算法思路的直觉
4） 空间和时间的交换（哈希表）
5） 预处理信息 （排序）
6） 在瓶颈处寻找答案： 
7） 极端条件的判断： 数组为空？字符串为空？ 数量为0？ 指针为NULL？
8） 变量名
9） 模块化， 复用性
10） 基本问题，白板编程

算法复杂度
1) n表示数据规模
2） O(f(n))表示运行算法所需要执行的指令数， 和f(n)成正比

