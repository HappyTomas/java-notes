1. Input/Output Streams
- In the Java API, an object from which we can read a sequence of bytes is called an input stream. An object to which we can write a sequence of bytes is called an output stream. These sources and destinations of byte sequences can be—and often are—files, but they can also be network connections and even blocks of memory.

- The abstract classes InputStream and OutputStream form the basis for a hierarchy of input/output (I/O) classes.

- Byte-oriented input/output streams are inconvenient for processing information stored in Unicode (recall that Unicode uses multiple bytes per character). Therefore, a separate
hierarchy provides classes for processing Unicode characters that inherit from the abstract Reader and Writer classes. These classes have read and write operations that are based on twobyte char values (that is, UTF-16 code units) rather than byte values.

- InputStream
abstract int read()
int read(byte[] b)
int read(byte[] b, int off, int len)
long skip(long n)
int available()
close()
flush()

- OutputStream
abstract void write(int n)
void write(byte[] b)
void write(byte[] b, int off, int len)
close()
flush()

- Instead of working with bytes, you can use one of many input/output stream classes derived from the basic InputStream and OutputStream classes.

- System.in is a predefined object of a subclass of InputStream that allows you to read information from “standard input,” that is, the console or a redirected file.

- Let’s divide the animals in the input/output stream zoo by how they are used. There are separate hierarchies for classes that process bytes and characters. As you saw, the InputStream
and OutputStream classes let you read and write individual bytes and arrays of bytes.

- For Unicode text, on the other hand, you can use subclasses of the abstract classes Reader and
Writer

- IO interface hierarchy
- Closable, Flushable, Readable, Appendable, CharSequence

- FileInputStream and FileOutputStream give you input and output streams attached to a disk file. You need to pass the file name or full path name of the file to the constructor.

- FileInputStream fin = new FileInputStream("employee.dat");

- All the classes in java.io interpret relative path names as starting from the user ’s working directory. You can get this directory by a call to System.getProperty("user.dir").

2. How to write text output
- PrintWriter out = new PrintWriter("employee2.txt", "UTF-8");
- out.print(name);
- out.println(salary);
- out.flush

3. How to read text input
String contents = new String(Files.readAllBytes(path), StandardCharsets.UTF_8);
List<String> lines = Files.readAllLines(path, StandardCharsets.UTF_8);
try (Stream<String> lines = Files.lines(path, StandardCharsets.UTF_8))