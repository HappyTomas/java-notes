INTERVIEW PREPARATION SUMMARY:

1. Spring: 
1) SpittrWebAppInitializer extends AbstractAnnotationConfigDispatcherServletInitializer or web.xml/dispacther-servlet/context-loader: load WebConfig, RootConfig, SecurityConfig
2) WebConfig or dispatch-servlet.xml: @Configuration, @EnableWebMvc or mvc:annotation-driven, @Bean or <bean>, InternalViewResolver, TilesBean, CommonsMultipartResolver from Jakarta etc
3) RootConfig: @Configuration, DataSource bean, JPA EntityManagerFactoryBean, SessionFactoryBean, SqlSesionFactory Bean, Ehcache, @PropertyResource

2. SpringMVC
2.1 Controller
1) @Controller, @RestController, @RequestMapping(GET/POST, Headers), @RequestBody(JSON, XML), @ResponseBody, @RequestParam(value, default), @PathVariables, form parameters mapped to object fields directly 
2) redirect, flash parameter useful for routing object, CommonsMultipartResolver from Jakarta Commons FileUpload/size limitation, MutipartFile file, input type=file, encrytype=multipart/form-data
3) default response code, @ResponseStatus on Exception, @ExceptionHandler on Exception handler class, @ControllerAdvice handle different exceptions in different methods
4) @ResponseBody, @ResponseEntity or custom response object. 
5) Validation: @Valid Spitter spitter, Errors error, return error to the view or put error into the response object 
6) MockMvc: build an MockMvc object from the controller, mock an service object, mockMvc.perform("/get") check return value, JSONPath
***7) register additional servlets, listeners and filters by creating a new implementation of WebApplicationInitializer.
8) @ResquestBody skips view and use message converter based on request content-type, Jackson JSON libary MappingJackson2HttpMessageConverter, @JsonIgnore
9) @ResponseBody use Accept in request header to select message converter
***10) #Consuming REST resources: RestTemplate, Object, ResponseEntity, Location, get, post, delete, head...
11) Filter (declare as a component or use FilterRegistrationBean to register)， HandlerInterceptor (override WebMvcConfigurer's add Interceptor method), Aspect (@Aspect, @Around, pointcut expression) can be used to intercepted request in Spring MVC 
12) fileupload: (MultipartFile file), file.transferTo(New File(folder, name)), or use an OutputStream to write to a file server or AWS.
***13) filedownload: request with a file id, server side:
		File file = new File(folder, filename + ".txt");
        try (
            InputStream is = new FileInputStream(file);
            OutputStream os = response.getOutputStream();
        ) {
            response.setContentType("application/x-download");
            response.addHeader("Content-Disposition", "attachment; filename=hello.txt");
            IOUtils.copy(is, os);
            os.flush();
        }
14) @JsonView: declare marker interface: UserSimpleView, UserDetailView; annotated getMethod with @JsonView(UserSimpleView.class)
; annotated controller method with @JsonView(UserDetailView.class)
15) custom validation: define a constraints annotation, e.g. UniqueConstraint, specify the validator in @Constraint(validatedBy = UniqueConstraintValidator.class); declare UniqueConstraintValidator implements ConstraintValidator<UniqueConstraint, Object> and override its isValid method

2.2 View
1) InternalResourceViewResolver for jsp, ContentNegotiaitonResolver for webpage + restful, TilesViewResolver for layout, FreemarkerViewResolver
2) templates typically come with a set of taglib, form taglib... utility taglib, resourceBundle support internationalization 

2.3) Spring Security
1) To secure web requests and restrict access at the URL level, Spring Security uses servlet filters. Spring Security can also secure method invocations using Spring AOP
2) Security filter: Configure a securityFilterChainProxy in web.xml or in a SecurityWebInitializer
public class SecurityWebInitializer extends AbstractSecurityWebApplicationInitializer {}
3) Congiure secutiry: @Configuration, @EnableWebMvcSecurity, public class SecurityConfig extends WebSecurityConfigurerAdapter == security-context.xml
3) override WebSecurityConfigurerAdapter’s three configure() methods:
3.1) configure(WebSecurity): Override to customize the Spring Security Filter Chain, add security filter, customize security filter
3.2) configure(HttpSecurity): interceptors, authenticated, hasRole, formLogin, loginURL, successURL, antMatcher, requiresSecure() for https; CSRF - use token to verify post is from page generated from this website. requiresInsecure() for http, rememberMe
.authorizeRequests().antMatcher(urlPattern).authenticated(); //authenticated() can be any authorization expressions such as hasRole, hasAuthority, fullAuthenticated, permitAll, denyAll, or even scope;
- 典型配置：1) 先允许所有的开放的url: antMatcher(..., ..., ...).permitAll(); 2) 再配置protectedURL required certain roles. 

3.3) configure(AuthenticationManagerBuilder): user-details services. auth.jdbcAuthentication().dataSource(dataSource); PasswordEncoder， ldap service
3.4）auth.ldapAuthentication()
				.userDnPatterns("uid={0},ou=people")
				.groupSearchBase("ou=groups")
				.contextSource()
					.url("ldap://localhost:8389/dc=springframework,dc=org")
					.and()
				.passwordCompare()
					.passwordEncoder(new LdapShaPasswordEncoder())
					.passwordAttribute("userPassword");
4) public interface UserDetailsService {
		UserDetails loadUserByUsername(String username) throws UsernameNotFoundException;
	}
	auth.userDetailsService(new SpitterUserService(spitterRepository));
5) AuthenticationProvider: registered the AuthenticationProvider, override the supports(AuthenticationToken) method.
5) Securing view: declare the JSP security tag library, <security:accesscontrollist>: <security:authentication>: <security:authorize>
6) Restricting method access with @Secured
6.1)
@Configuration
@EnableGlobalMethodSecurity(securedEnabled=true)
public class MethodSecurityConfig extends GlobalMethodSecurityConfiguration {
	@Override
	protected void configure(AuthenticationManagerBuilder auth) throws Exception {
		//....
	}
}
6.2)  
@Secured({"ROLE_SPITTER", "ROLE_ADMIN"})
public void addSpittle(Spittle spittle) {
	// ...
}

2.4) Spring JDBC
1) JDBCTemplate, DataAccessException extends RuntimeException;
- As this class is a runtime exception, there is no need for user code to catch it or subclasses if any error is to be considered fatal (the usual case).
2) DataSource: Pooling using Apache Commons DBCP or C3P0

2.6) Hibernate 4
1) auto query generation, lazy loading, eager fetching, cascading
2) declare HibernateSessionFactoryBean: set dataSource, hibernateProperties properties and packageToScan or mapper file locations
3) @Inject Hibernate SessionFactory into Repository @Repository and configuration bean
3) use that SessionFactory.getCurrentSession() to get the "current transaction’s session"
4) use currentSession().save(), get()....
5) declare PersistenceExceptionTranslationPostProcessor in configuration bean
6) declare transaction manager in configuration bean
7) any hibernate operation needs to be annotated with @Transactional
8) Mapping annotation??: @Entity @Id, @Table @Column, @Id key generation strategy: IDENTITY, @OneToOne @OneToMany @Cascading 
9)  @Lob  // 大对象，映射 MySQL 的 Long Text 类型
	@Basic(fetch=FetchType.LAZY) // 懒加载
10) @OneToMany(cascade = CascadeType.ALL, fetch=FetchType.LAZY)
    @JoinColumn(name="USER_ID")
11) @ManyToOne(cascade = CascadeType.ALL, fetch = FetchType.EAGER)
    @JoinColumn(name="USER_ID")
12) @org.hibernate.annotations.CreationTimestamp  // 由数据库自动创建时间

2.7) JPA 2.0
1) similar to Hibernate because it uses Hibernate as its implementation
2) EntityManagerFactory == SessionFactory 
3) The purpose of the persistence.xml file is to define one or more persistence units.
4) declare a LocalContainerEntityManagerFactoryBean, set dataSource and jpaVendorAdapter:
5) configure a HibernateJpaVendorAdapter, set datasource, hibernate properties
6) @PersistenceContext/@PersistenceUnit. Instead of giving the repository a real EntityManager, it gives a proxy to a real EntityManager. 
7）EntityManager can be used to find(Customer.class, custId), persist, remove Entity.

2.8) Spring Data JPA
1）the db operation methods in repository are boilerplate，the domain types will be different, but the methods are fairly common across all kinds of repositories.
2）Spring Data JPA lets you just writing the repository interface without the implementation.
3）extends one of spring data interfaces: JpaRepository, CRUDRepository, PagingAndSortingRepository
public interface SpitterRepository extends JpaRepository<Spitter, Long> {}
4) JpaRepository is parameterized such that it knows this is a repository for persisting Spitter objects and that Spitters have an ID of type Long.
5) JpaRepository inherits 18 methods for performing common persistence operations, such as saving, deleting, and finding by its ID.
6) @EnableJpaRepositories in configuration class. @EnableJpaRepositories(basePackages="com.habuma.spittr.db")
7) @EnableJpaRepositories scans its base package for any interfaces that extend Spring Data JPA’s Repository interface. 
8) When it finds any interface extending Repository, it automatically (at application startup time) generates an implementation of that interface.
9) if custom query other than the 18 default queries are needed, specify a method in the repository interface, use the method signature to indicate the implementation. e.g. Spitter findByUsername(String username) 
10) use Pageable to return certian pages of data (page, size, direction, sort attribute)
@RequestMapping(value = "", method=RequestMethod.GET)
public Page<Blog> getEntryByPageable(@PageableDefault(value = 15, sort = { "id" }, direction = Sort.Direction.DESC) 
    Pageable pageable) {
    return blogRepository.findAll(pageable);
}
10) Spring Data JPA can be used to access NoSQL db. @Document @Id, @Redis

2.9) MyBatis 3.2
1) Mapper.xml, Mapper interface
2) Declare SqlSessionFactoryBean to scan mapper file. also set DataSource
3) Inject mapper interface into repository
4) easy to create complex sql

2.10) Spring+Hibernate+Ehcache integration
1) hibernate可以用两种不同的对象缓存：first-level cache 和 second-level cache。first-level cache和Session对象关联，而second-level cache是和Session Factory对象关联。
2) hibernate默认使用基于每个事务的first-level cache。Hibernate用first-level cache主要是减少在一个事务内的sql查询数量。 例如，如果一个对象在同一个事务内被修改多次， hibernate将只生成一个包括所有修改的 UPDATE SQL语句。
3) second-level cache在Session Factory级的不同事务之间保持load的对象，这些对象对整个应用可用，不只是对当前用户正在运行的查询。这样，每次查询将返回已经load在缓存 里的对象，避免一个或更多潜在的数据库事务。 
4) HibernateSessionFactoryBean
@Bean
public LocalSessionFactoryBean sessionFactory(DataSource dataSource) {
    LocalSessionFactoryBean sfb = new LocalSessionFactoryBean();
    sfb.setDataSource(dataSource);
    sfb.setPackagesToScan(new String[] { "spittr.domain" });
    Properties props = new Properties();
    props.setProperty("dialect", "org.hibernate.dialect.H2Dialect");
    ***props.setProperty("hibernate.cache.use_second_level_cache", "true");
    ***props.setProperty("hibernate.cache.use_query_cache", "true");
    ***props.setProperty("hibernate.cache.region.factory_class", "org.hibernate.cache.ehcache.SingletonEhCacheRegionFactory");
    props.setProperty("hibernate.show_sql", "true");
    sfb.setHibernateProperties(props);
    return sfb;
}
5) ehcache.xml
6) cache strategy
READ_ONLY: 适用于仅读取，如果有数据的更新操作则会异常。
READ_WRITE: 用读写锁控制缓存
NON_STRICT_READ_WRITE: 不加锁控制缓存，写会有冲突，适用于很难发生写冲突的系统。
7) other ehcache info: https://www.cnblogs.com/cielosun/p/6793962.html
*** 8) @Cacheable； @org.hibernate.annotations.Cache(usage = CacheConcurrencyStrategy.READ_WRITE)

2.11) Spring remoting has libary support SOAP

2.12) Messaging
1）Decoupling
2) message brokers and destinations; two types of destination: queues and topics. 
3) POINT-TO-POINT MESSAGING:  use queue
3.1) each message has exactly one sender and one receiver
3.2) A message queue decouples a message sender from the message receiver. Although a queue may have several receivers, each message is picked up by exactly one receiver.
3.3) Because the message is removed from the queue as it’s delivered, it’s guaranteed that the message will be delivered to only one receiver.
4) PUBLISH-SUBSCRIBE MESSAGING: use topics
4.1) Unlike queues, a topic message may be delivered to many topic subscribers.
4.2) In the publish/subscribe messaging model, messages are sent to a topic. As with queues, many receivers may be listening to a topic.
4.3) But unlike with queues, where a message is delivered to exactly one receiver, all subscribers to a topic receive a copy of the message
***5) Spring supports message-driven POJOs(MDP): a way to receive messages that resembles EJB’s message-driven beans (MDBs).
6) The Java Message Service (JMS) is a Java standard that defines a common API for working with message brokers.
***7) Spring supports JMS through a template-based abstraction known as JmsTemplate.
8) Spring AMQP provides RabbitTemplate to eliminate boilerplate associated with sending and receiving messages with RabbitMQ.

3. Spring Boot version 1.4.7
3.1) Spring Boot Basics: 
1) less configuration + "on top of Spring".
3) Spring Boot's four main features:
3.1) Spring Boot starters: group library together and compatability tested.
3.2) Autoconfiguration: conditional configuration, guess what you need an configure the bean based on libary loaded from classpath.
3.3) Command-line interface (CLI): Groovy programming environment
3.4) Actuator: management features

3.2) configuration
1）Use Spring Boot initailizr in idea to generate the gradle or maven project. 
2) @SpringBootApplication = @Configuration + @ComponentScan + @EnableAutoConfiguration
public class Application {
    public static void main(String[] args) {
***       SpringApplication.run(Application.class, args);
    }
}
3) Use application.properties or application.yml file to overwrite the default configuration, e.g. logging level, datasource, Spring Security
4) application.properties or application.yml file can be put into classpath root or /config directory.
5) at the same level of precedence, properties in application.yml will override those in application.properties.

3.3) MockMvc
1) @RunWith(SpringJUnit4ClassRunner.class); or @RunWith(SpringRunner.class), @SpringBootTest
2) use MockMvcBuilders to set up a Mock MVC in your test. This class offers two static methods:
3) standaloneSetup()—Builds a Mock MVC to serve one or more manually created and configured controllers
4) webAppContextSetup()—Builds a Mock MVC using a Spring application context, which presumably includes one or more configured controllers
5) use static methods from Spring’s MockMvcRequestBuilders and MockMvcResultMatchers, as well as from the Hamcrest library’s Matchers.
6) test spring security: apply the Spring Security configurer when creating the MockMvc instance:
@Before
public void setupMockMvc() {
	mockMvc = MockMvcBuilders
		.webAppContextSetup(webContext)
		.apply(springSecurity())
		.build();
}
***7) Integration Test: 3) uses @WebIntegrationTest to start the application along with a server and uses Spring’s RestTemplate to perform HTTP requests against the application.

3.4) Deployment
1) deployed as a jar file and run as standalone application
2) package war file and deploy in tomcat
3) create a production profile with properties pointing to production environment. 
4) use environment variable to activate the production profile: $ export SPRING_PROFILES_ACTIVE=production

4. Spring Security Restful
4.1）Basics
1) WebSecurityConfigurerAdapter
2) Spring Security过滤器链: UsernamePasswordAuthenticationFilter, BasicAuthenticationFilter, ExceptionTranslationFilter, FilterSecurityInterceptor: 过滤器链最后一环，守门人，根据配置判断是否允许请求访问， 如果不允许，则根据不能访问的原因，抛出不同异常
3）各种形式的Spring Security的功能特性都是基于此过滤器链，短信登录、QQ登录、微信登录都是在过滤器链上增加各种过滤器来支持不同的身份认证方式
4）AuthenticationFilter can be configured or disabled, but ExceptionTranslationFilter and FilterSecurityInterceptor are always enabled

4.2) 如何实现cookie-less 的restful的Spring Security?
1) Spring Security OAuth: 对app访问应用进行认证，token based
2) need spring-security-oauth2 package. use OAuth password grant_type
***3) Configure Authorization Server:
@Configuration
@EnableAuthorizationServer
public class imoocAuthorizationServerConfig extends AuthorizationServerConfigurerAdapter {	
	//(optional) 1. configure tokenEndpoint to use customized authenticationManager, ldapAuthenticationProvider, userDetailsService
	//(optional) 2. configure clientDetailsService(configuration for app). clientId, clientSecret, tokenValidation, authorizedGrantType, scope
	// 3. create a RedisTokenStore, configure tokenEndpoint to use RedisTokenStore.
}
5) Client access /oauth/token end point needs to provide grant_type=password, username, password, scope and clientID and clientSecret in base64 encoding
5.2）post: http://localhost:8080/oauth/token -> TokenEndPoint (a controller) 
grant_type=password
username=daniel
password=123456
scope=all
7) Authorization Server response with token as JSON:
{
	"access_token": "38857a83-3773-429b-a630-8ce580b8105a",
	"token_type": "bearer",
	"refresh_token": "5f38a096-47a5-49a9-850f-9a5dc25c5c02",
	"expires_in": 42079,
	"scope": "all"
}
8) Configure resource server:
@Configuration
@EnableResourceServer
public class imoocResourceServerConfig extends ResourceServerConfigurerAdapter {
	// overwrite configure(HttpSecurity http), specified url interceptor and resources requirments
}
9) when user access a page it needs to carry the token string in headers, otherwise a 403 forbiden will be sent
e.g. access http://localhost:8080/user/me; In header: Authorization: bearer c307e98c-de2f-449d-8bc6-ebd612a899bb  //token string
11) Token store: use database or Session or redis
12) jwt: self-contained (userid, roles, clientId, expiry time...), doesn't need tokenStore, signed, extentable
13) jwt: configure TokenEnpoints to use jwtTokenStore, use jwtTokenConverter
14) how to achieve logout? AuthorizationServerTokenServices.revokeToken

5. front-end
1) use node.js + npm + webpack + sublime + chrome debugger + charles/Fiddler as the development environment, webpack replies on node and npm,
2) use html as template and mustache/Hogan as template engine
3) business logic is written in js + jQuery
4) create project structure: git init->src -> view (html), page (js for business logic), service (ajax access to rest api), util, image
5) page/common, page/user/user.js..user.css, in user.js, requires('../user.css'), requires('') 
6) in user.html, reference user.css, user.js, common.js
7) npm init -> package.json(entry: index.js); npm install xxx@vvv; npm install -g


6. webpack
1) webpack (1.15) is an development server + packaging/deployment tool
2) webpack use js require (commonjs: modules.export, require(...) in source code to reference all kinds of resources, and use loader to load those resources.
3) webpack use nodejs to translate the commonjs module into js functions supported by browser.
4) webpack use webpack.config.js (a commonjs module) to define compiling/packaging/deployment details: entry (multiple js entry), output(multiple js output) , module(loader), plugins 
5) loaders: html loader, bable-loader, style-loader, css-loader, urlloader
6) webpack-dev-server(v1.16.5): a front development server can be used for real-time deployment and testing, liveload
7) commonChunkPlugin: extract common modules.
8) extract-text-webpack-plugin: package css as standalone file, not bundled into js
9) html-webpack-plugin: automatic inject css, js into html, use a hash code as version number
10) add webpack-dev-server client to a common module, when update a file, webpack-dev-server (inline mode) will detect the change, the client will reload the page into browser
11) front end deployment
- git pull; npm install; webpack, cp /dist/ to target server
- configure nginx; proxy domain name to actual file locations
- configure domain name on nginx: dist/html proxy to www.happymmall.com, dist/admin to admin.happymmall.com, js/css/images to s.happymmall.com
- configure dns resolution: domain names map to ip address
- install nodejs: wget + tar -xzvf filename, mv to usr/local, NODE_HOME in /etc/profile
- npm install webpack -g
- git clone src-repository
- npm install
- webpack //packaging
- cp -R /dist /product/frontend
12) deployment script
#!/bin/sh //standard starting syntax
GIT_HOME=/developer/git/repository
if [! -n "$1"];  //$1 第一个参数
	then echo -e "请输入要发布的项目！"  //-e 分行打印
	exit //退出
fi
if
	then
	cd $GIT_HOME$1
elif
	then
else
	echo -e ""

if [-d "./dist"]; //如果存在目录
13） configure nginx and domain name resolving: need to use nginx as the proxy of domain name
- cd /usr/local/nginx/conf/vhost
- define domain name configuration file: admin.happymmall.com.conf, img..conf, s..conf., happymmall.com.conf
server {
	listen 80;
	autoindex on;
	server_name happymmall.com www.happymmall.com;
}


7. jQuery (1.11.3)
1) npm install jQuery; In page.js, var $ = require('jQuery')
2) 2nd way to load jQuery: in html page <sciprt...>
3) util: encapsulate ajax into a common js module: $.ajax({type: 'get' , url: '', dataType: 'json', data: '', success: , error: })
4) util: doLogin: function() {
	window.location.href = './login.html?redirect=' + encodeURLComponent(window.location.href); //can be used for other routing
}
5) util: renderHtml: function(htmlTemplate, data) {
	var template = Hogan.compile(htmlTemplate);
	var result = template.render(data);
	return result;
}
6) util: sucessTips: function(msg) {
	alert(msg || 'succeed');
}
7) util: validate...
8) Event binding: $('.js-login').click(function() {
	_mm.doLogin();
}) //login click event
9) obtain form value: $(#username).val()
10) $('.step-username').hide().show()
11) var templateIndex = require('/index.string'); // template
12) index.string: <img src="{{imageHost}}{{mainImage}}"/>
12) listHtml = _mm.renderHtml(templateIndex, {list:res.list});
13) $('p-list-con').html(listHtml); 
14） jQuery form plugin is used to upload file.
15) data: { AlbumName: "shanghai", Entered: "5/9/2013" }, 不用JSON.stringify(data), 默认转换为queryString
$.ajax({
    url: 'Ajax.ashx',
    type: 'POST',
    data: JSON.stringify(data),
    contentType: 'application/json; charset=utf-8',
    dataType: 'json',
    async: false,
    success: function(msg) {
        alert(msg);
    }
});
16) status code: 
$.ajax(serverUrl, {
   type: OutageViewModel.Id() == 0 ? "POST" : "PUT",
   data: dataToSave,
   statusCode: {
      200: function (response) {
         alert('1');
         AfterSavedAll();
      },
      201: function (response) {
         alert('1');
         AfterSavedAll();
      },
      400: function (response) {
         alert('1');
         bootbox.alert('<span style="color:Red;">Error While Saving Outage Entry Please Check</span>', function () { });
      },
      404: function (response) {
         alert('1');
         bootbox.alert('<span style="color:Red;">Error While Saving Outage Entry Please Check</span>', function () { });
      }
   }, success: function () {
      alert('1');
   },
});

8. Design Patterns
1) Template pattern: JDBCTemplate, standard steps + custom callback -> lambda expression
2) Proxy: AOP relies on proxy
3) Factory: EntityManagerFactoryBean, spring context/bean
4) MVC: Spring MVC
5) singleton: Bean singleton, Properties Bean
6) prototype: clone
7) Iterator: Java collection framework
8）Chain of Responsibility Pattern： Security filter chain
9) command pattern: struts action
10) Observer: event notification
11) Data Access Object: interface, implementation, entity
12) Interceptor
13) Data Transfer Object
14) Front controller: dispatcher/view
15) examples from real projects:
- Chain of responsibility: add securityFilter (smsAutehnticationFilter) to the Spring security filterchain
- singleton: read configuration properties from text file and provide it to different parts.
- proxy: Aspect in AOP, Spring security's method security, remote proxy in Spring remoting
- Template patterns: when we implements JDBCTemplate, we actually following the template patterns
- Factory: JDBC driver, Spring BeanFactory
- Proxy: security proxy, remote proxy, logging proxy; Static vs. Dynamic Dynamic Proxy, JDK vs. CGlib, Proxy.newInstance(classLoader, interfaces, handler); InvocationHandler.invoke(proxy, method, )
16) Strategy: 工厂模式是提供不同的对象，策略模式提供的是不同算法！ Abstract Algorithm interface + various concrete implementations
public interface FlyingStrategy {
	void performFly();
}
private FlyingStrategy flyingStrategy;
public void fly() {
	flyingStrategy.performFly();
} 
17) 开闭原则: 一个软件实体如类、模块和函数应该对扩展开放，对修改关闭。
18) 客户端不应该依赖它不需要的接口；一个类对另一个类的依赖应该建立在最小的接口上。

9. AngularJS
1) use webpack: entry file: app.js; output file: app.bundle.js
2) index.html load app.bundle.js
3) routing: angular-ui-router, state->template->controller
4) //跳转 $state.go('main', {id: contact.id}, {location:'replace'}); or ui-sref="position({id:item.id})"
5) //参数 $state.params.id <===> $stateParams.id
6) $http.get(url+'?id='+$state.params.id).success().error()
6) Directive: angular's way to encasulate common page element/component(html template, css, js)
7) <div app-position-list data="list"></div> //data is the model data interface between the directive and its user. e.g. controller $scope.list = res.list;
8) restrict: 'EA', replace: true; scope: {//@,=, &}, scope: {name: '@'} //接口, transclude: true //内嵌html， templateUrl: 'view/template/head.html', 
link: function(scope, element, attr) {
	scope.className="asdf";
	console.log(scope, element, attr);
} //行为，可以对directive中的元素进行操作
9) native directive: ng-model, ng-if, ng-hide, ng-click, ng-bind, ng-repeat, ng-show, ng-class
10) $http.get(url).success().error();
11) $http.get(url+'?id='+$state.params.id).success().error()
12) $scope: $id, $parent, $root, function: $watch, $on (receive event), $broadcast (to sub scope), $emit (to parent scope), $digest (after native method operated on dom object, need to synchronize)
13) service: $http, $timeout, $interval, $rootScope, $q; service can be customized: e.g. cache
14) file upload: use FormData object; transformRquest: angular.identity
$scope.save = function() {    
        var fd = new FormData();
        var file = document.querySelector('input[type=file]').files[0];
        fd.append('logo', file); 
         $http({
              method:'POST',
              url:"your url",
              data: fd,
              headers: {'Content-Type':undefined},
              transformRequest: angular.identity 
               })   
              .success( function ( response )
                       {
                       //上传成功的操作
                       alert("uplaod success");
                       }); 

     }
    });
15) $http 传参, params: { id: '1002', aad: 'zzz' },//params作为url的参数, data: { keyName: 'qubernet' }//作为消息体参数    
var app = angular.module('myApp', []);  
        app.controller('customersCtrl', function($scope, $http) {  
              
            $http({  
              url:'json/data.json',  
              method: 'get',    
              params: { id: '1002', aad: 'zzz' },//params作为url的参数  
              data: { keyName: 'qubernet' }//作为消息体参数    
            }).success(function() {  
              console.log("success!");  
            }).error(function(){  
              console.log("error");  
            })  
        });  

method 方法
url 路径
params GET请求的参数
data post请求的参数
headers 头
transformRequest 请求预处理函数
transformResponse 响应预处理函数
cache 缓存
timeout 超时毫秒，超时的请求会被取消
withCredentials 跨域安全策略的一个东西

11. JPA/Hibernate annotation
1）@Entity, @Table, @ID，@GeneratedValue(strategy=GenerationType.SEQUENCE), @Column, @Transitent, @Basic(fetchType=EAGER/LAZY)
2)一对多（多对一）双向外键
多方持有一方的引用 
@ManyToOne(cascade={CasecadeType.All},fetch=FetchType.EAGER) 
@JoinColum(name=”cid”)

一方持有多方的集合 
@OneToMany(cascade={CasecadeType.All},fetch=FetchType.LAZY) 
@JoinColum(name=”cid”) 
保存时无论先保存哪一方都可以。

12. jQuery 常用命令
1) selector: $(.clsName), $('#id'), $('div') ...
2) selector: $('p').parent(), $('p').sibling(), $('p').next(), $('p').prev()..
3) Attr: $('img').attr('src')
4) css: $('p').addClass('active'), removeClass, toggleClass, css: $('p').css('color', 'red');
5) $('p').html(), .text()
6) $('p').offset().top, .left(), $('p').height(), width(), innerHeight, innerWidth， outerHeight, outerWidth
7) $('p').append(), prepend, appendTo, prependTo, after, before, insertAfter, insertBefore
8) $(document).ready(function() {...})
9) event: $('p').bind('click').function(){...}, one, unbind, delegate
10) event: click, mouseup, mousedown, mouseout, keyup, keydown, focus, blur, submit, scroll
11) event: e.pageX, e.pageY, e.target, e.preventDefault(), e.stopPropogation()
12) effect: $('p').show(), hide(), fadeIn(), fadeOut() 
13) utility: $.trim(), .each(), .inArray(), .type(), isArray(), isFuntion()...
14) plugin extension: jQuery.extend({min: ..., max: ...,}); jQuery.min(...); jQuery.max(...)

13. jQuery 常见插件
1） jQuery formValidator
2） uploadify 

14. Core Java
1) java 8 features: 
- lambda expression and functional interface, method reference
- date/time api(LocalDateTime, ZonedDateTime), replacing popular joda time
- allows default method and static method in interface
***- Annotation: allows repeated annotations, allows annotaions to be added to more places
- -parameters config for java compiler
- Optional实际上是个容器：它可以保存类型T的值，或者仅仅保存null
- Stream API simpilifed collection processing
- Arrays parallel processing
- PermGen空间被移除了，取而代之的是Metaspace。JVM选项-XX:PermSize与-XX:MaxPermSize分别被-XX:MetaSpaceSize与-XX:MaxMetaspaceSize所代替。

Java/JEE, Spring MVC, Spring Security, Restful API, MyBatis, IntelliJ IDEA, Junit/Mockito/MockMVC, Git/Maven/Linux deployment script, Tomcat, MySQL, Design Patterns, UML, HTML/CSS/JS/jQuery/AJAX/JSON

#commons-lang包中对我们有用的类主要有:
1.StringUtils 该类主要提供对字符串的操作,对null是安全的,主要提供了字符串查找,替换,分割,去空白,去掉非法字符等等操作
2.ObjectUtils 主要是对null进行安全处理,可以设置为null时的默认返回值,比较相等时是调用对象的equals方法,因此需要对对象进行方法进行覆盖
3.SystemUtils 主要获取一些系统属性,例如工作目录等等
4.DateUtils/CalendarUtils 主要提供了对日期的操作,包括日期加减,日期格式化,日期比较,一定时间范围内日期的迭代等等
5.StopWatch 提供秒表的计时,暂停等功能
6. EqualsBuilder/HashCodeBuilder提供了方便的方法来覆盖equals() 和hashCode()方法
7.以Range结尾的类主要提供一些范围的操作,包括判断某些字符,数字等是否在这个范围以内
8.ArrayUtils 提供了数组的复制,查找,获取子数组,反转等功能
9. RandomStringUtils.randomNumeric(int count): 该方法返回指定数目的随机数字串，如果把返回的数字串解析成数字，不就可以产生随机数了么
10. IOUtils: IOUtils.copy(is, os);

14. JavaScript
1) 第一种是==比较，它会自动转换数据类型再比较，很多时候，会得到非常诡异的结果； 
第二种是===比较，它不会自动转换数据类型，如果数据类型不一致，返回false，如果一致，再比较。 不要使用==比较，始终坚持使用===比较。
2) NaN这个特殊的Number与所有其他值都不相等，包括它自己; 唯一能判断NaN的方法是通过isNaN()函数：
3) JavaScript的设计者希望用null表示一个空的值，而undefined表示值未定义。
4) var arr = [1, 2, 3.14, 'Hello', null, true]; arr.length
5) 对象: JavaScript的对象是一组由键-值组成的无序集合
var person = {
    name: 'Bob',
    age: 20,
    tags: ['js', 'web', 'mobile'],
    city: 'Beijing',
    hasCar: true,
    zipcode: null
};
person.name; // 'Bob'
person.zipcode; // null
6) 要获取字符串某个指定位置的字符，使用类似Array的下标操作，索引号从0开始; 字符串是不可变的，如果对字符串的某个索引赋值，不会有任何错误，但是，也没有任何效果; toUpperCase(), toLowerCase(); indexOf(); substring()
7) Array: 请注意，如果通过索引赋值时，索引超过了范围，同样会引起Array大小的变化; 
indexOf, slice, push, pop, unshift, shift, sort, reverse, splice, concat, join
8) Object: 如果属性名包含特殊字符，就必须用''括起来：
var xiaohong = {
    name: '小红',
    'middle-school': 'No.1 Middle School'
};
xiaohong['middle-school']; // 'No.1 Middle School'
JavaScript的对象是动态类型，你可以自由地给一个对象添加或删除属性:
xiaoming.age; // undefined
xiaoming.age = 18; // 新增一个age属性
xiaoming.age; // 18
delete xiaoming.age; // 删除age属性
'name' in xiaoming; // true
'grade' in xiaoming; // false
hasOwnProperty()
9) JavaScript把null、undefined、0、NaN和空字符串''视为false，其他值一概视为true. 
var s = '123'; 
if (s.length) { // 条件计算结果为3
    //
}
10) ES6标准引入了新的iterable类型，Array、Map和Set都属于iterable类型。 具有iterable类型的集合可以通过新的for ... of循环来遍历。
11) function: JavaScript的函数不但是“头等公民”，而且可以像变量一样使用，具有非常强大的抽象能力。
- 由于JavaScript的函数也是一个对象，上述定义的abs()函数实际上是一个函数对象，而函数名abs可以视为指向该函数的变量。
function abs(x) {...}
- var abs = function (x) {...}
- JavaScript还有一个免费赠送的关键字arguments，它只在函数内部起作用，并且永远指向当前函数的调用者传入的所有参数。
- ES6标准引入了rest参数，function foo(a, b, ...rest) {...}
12) scope:
- JavaScript实际上只有一个全局作用域。任何变量（函数也视为变量），如果没有在当前函数作用域中找到，就会继续往上查找，最后如果在全局作用域中也没有找到，则报ReferenceError错误。
- 全局变量会绑定到window上，不同的JavaScript文件如果使用了相同的全局变量，或者定义了相同名字的顶层函数，都会造成命名冲突，并且很难被发现。
- 减少冲突的一个方法是把自己的所有变量和函数全部绑定到一个全局变量中。
***- 局部作用域: 由于JavaScript的变量作用域实际上是函数内部，我们在for循环等语句块中是无法定义具有局部作用域的变量的
***- 为了解决块级作用域，ES6引入了新的关键字let，用let替代var可以申明一个块级作用域的变量：
***- ES6标准引入了新的关键字const来定义常量，const与let都具有块级作用域
13）method: 在一个对象中绑定函数，称为这个对象的方法。
- 在一个方法内部，this是一个特殊变量，它始终指向当前对象，也就是xiaoming这个变量。所以，this.birth可以拿到xiaoming的birth属性。
- 用var that = this;，你就可以放心地在方法内部定义其他函数，而不是把所有语句都堆到一个方法中。
- 要指定函数的this指向哪个对象，可以用函数本身的apply方法，它接收两个参数，第一个参数就是需要绑定的this变量，第二个参数是Array，表示函数本身的参数。
- apply()把参数打包成Array再传入； call()把参数按顺序传入
- 装饰器: 利用apply()，我们还可以动态改变函数的行为。
- JavaScript的所有对象都是动态的，即使内置的函数，我们也可以重新指向新的函数。
- Higher-order function: 一个函数就可以接收另一个函数作为参数; map(), reduce(), filter(), sort(function() {})
***14) Closure: 在这个例子中，我们在函数lazy_sum中又定义了函数sum，并且，内部函数sum可以引用外部函数lazy_sum的参数和局部变量，当lazy_sum返回函数sum时，相关参数和变量都保存在返回的函数中，这种称为“闭包（Closure）”的程序结构拥有极大的威力。
- 返回闭包时牢记的一点就是：返回函数不要引用任何循环变量，或者后续会发生变化的变量。
***15) 在面向对象的程序设计语言里，比如Java和C++，要在对象内部封装一个私有变量，可以用private修饰一个成员变量。在没有class机制，只有函数的语言里，借助闭包，同样可以封装一个私有变量。
16) 换句话说，闭包就是携带状态的函数，并且它的状态可以完全对外隐藏起来。
17) ES6标准新增了一种新的函数：Arrow Function（箭头函数）。 x => x * x
18) Generator: yield a; next()
19) standard object:
typeof 123; // 'number'
typeof NaN; // 'number'
typeof 'str'; // 'string'
typeof true; // 'boolean'
typeof undefined; // 'undefined'
typeof Math.abs; // 'function'
typeof null; // 'object'
typeof []; // 'object'
typeof {}; // 'object'
*** 20) JavaScript不区分类和实例的概念，而是通过原型（prototype）来实现面向对象编程。 继承关系不过是把一个对象的原型指向另一个对象而已。
21）Browser objects: window, navigator(browser info), screen, location (.href, protocol, host, port, pathname, search, hash), location.assign(newpage), location.reload, e, document.cookie (httpOnly), history.back(), forward()
22) DOM: document.getElementsByClassName(), document.getElementById, getElementsByTagName, querySelector(), querySelectorAll()
23) innerHTML, innerText, textContent, p.style.fontSize = '20px'; appendChild, insertBefore
24) var input = document.getElementById('email'); input.value; // '用户输入的值'
25) 方式一是通过<form>元素的submit()方法提交一个表单，例如，响应一个<button>的click事件，在JavaScript代码中提交表单：
26) 随着HTML5的普及，新增的File API允许JavaScript读取文件内容，获得更多的文件信息。 HTML5的File API提供了File和FileReader两个主要对象，可以获得文件信息并读取文件。
*** 27) 在现代浏览器上写AJAX主要依靠XMLHttpRequest对象：
*** 28) 同源策略: 默认情况下，JavaScript在发送AJAX请求时，URL的域名必须和当前页面完全一致。
*** 29) CORS全称Cross-Origin Resource Sharing，是HTML5规范定义的如何跨域访问资源。 可见，跨域能否成功，取决于对方服务器是否愿意给你设置一个正确的Access-Control-Allow-Origin，决定权始终在对方手中。

JSON:
1) JSON实际上是JavaScript的一个子集。在JSON中，一共就这么几种数据类型：
number：和JavaScript的number完全一致；
boolean：就是JavaScript的true或false；
string：就是JavaScript的string；
null：就是JavaScript的null；
array：就是JavaScript的Array表示方式——[]；
object：就是JavaScript的{ ... }表示方式。
2) 字符集必须是UTF-8，表示多语言就没有问题了。为了统一解析，JSON的字符串规定必须用双引号""，Object的键也必须用双引号""。
3) Serialization: object -> string; var s = JSON.stringify(xiaoming);
4) Deserialization: string -> object; JSON.parse(str)

Spring-security LDAP
1) in spring security config class, configure AuthenticationManager to use ldapAuthenticationProvider
auth.ldapAuthentication();
2) configure userSearchFilter to search entry for uid match the login name: 
auth.userSearchFilter('uid={0}'); .userSearchBase("ou=people") //use search Base to specified the branch to search.
3) the login password will be used to compare with the password in ldap:
.passwordCompare() //if password is encoded in ldap, a password encoder will be required. .passwordEncoder(new LdapShaPasswordEncoder())
4) configure groupSearchFilter to search entry for with attributes member matching the login name: 
.groupSearchFilter("member={0}"); .groupSearchBase("ou=groups") //use search Base to specified the branch to search.
5) the cn of the group entry will be returned as the role name. multiple entries can be found and multiple entries returned.

Spring-security jwt:
- jwtAccessTokenConverter
- jwtTokenStore

Session Management
1) session expiry: 
- server.session.timeout = 100 //seconds, at least 60 seconds
- http.sesstionManagement().invalidSessionUrl("/session/invalid")
2) session concurrency: cannot login from two sessions
- http.sesstionManagement()
	.maximumSession(1)
	.expiredSessionStrategy(expiredSessionStrategy) //record session kickout event
	.maxSessionPreventsLogin(true) ; 
3) session clustering management:
- dependency: org.spring.framework.session, spring-session
- spring.session.store-type = redis
- spring.redis.host = 
- spring.redis.port = 6379

REST
1) URL represents resources (/user/1)
2) HTTP method represents action (GET/POST/PUT/DELETE)
3) HTTP status code represents result
4) use JSON for data exchange

Datasource
db.url=jdbc:mysql://localhost:3306/mmall?characterEncoding=utf-8
db.username=mmall
db.password=mmallpassword

db.initialSize = 20
db.maxActive = 50
db.maxIdle = 20
db.minIdle = 10
db.maxWait = 10
db.defaultAutoCommit = true
db.minEvictableIdleTimeMillis = 3600000

#Exception Handling
0) three types: checked exception, error, runtime exception
1) All exceptions are checked exceptions, except for those indicated by Error, RuntimeException, and their subclasses.
1) checked exception:  exceptional conditions that a well-written application should anticipate and recover. e.g. FileNotFoundException
- subject to the Catch or Specify Requirement. 
2) Error:  exceptional conditions that are external to the application, and that the application usually cannot anticipate or recover from. file IOError, database connection problem.
- Errors are not subject to the Catch or Specify Requirement. Errors are those exceptions indicated by Error and its subclasses.
3) runtime exception: 
- Unchecked Exception: exceptional conditions that are internal to the application, and that the application usually cannot anticipate or recover from. These usually indicate programming bugs, such as logic errors or improper use of an API. e.g. NullPointerException
4) Some programmers consider the Catch or Specify Requirement a serious flaw in the exception mechanism and bypass it by using unchecked exceptions in place of checked exceptions.
5) Here's the bottom line guideline: If a client can reasonably be expected to recover from an exception, make it a checked exception. If a client cannot do anything to recover from the exception, make it an unchecked exception.

